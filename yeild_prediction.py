# -*- coding: utf-8 -*-
"""yeild prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15hycgLiHBblnhUZH0P4xEFE04zusVkha
"""



"""##Data understanding"""

#importing necessary libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
#load the test dataset

data = pd.read_csv('crop_yield.csv')
data.head()

data.info()

data.shape

data.describe()

data.dtypes

data.columns

data.nunique()

data['Crop'].unique()

data['State'].unique()

data['Season'].unique()

"""##data cleaning

"""

data.duplicated().sum()

data.isna().sum()

"""## Outlier detection"""

import matplotlib.pyplot as plt
import seaborn as sns

# Specify numerical columns for which to create boxplots
numerical_columns = ['Crop_Year', 'Area', 'Production', 'Annual_Rainfall', 'Fertilizer', 'Pesticide', 'Yield']

# Create boxplots for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(8,6))
    sns.boxplot(x=data[column])
    plt.title(f'Boxplot of {column}')
    plt.show()

"""## EDA (Exploratory data analysis)

bivariate analysis
"""

#Proportion of Each Season

data['Season'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title('Proportion of Each Season')
plt.ylabel('')
plt.show()

data.hist(figsize=(15,10), color="green",edgecolor="black",linewidth=2)
plt.show() #univariate

# List of categorical columns to plot bar plots for
categorical_columns = ['Crop', 'Season', 'State']

# Plotting bar plots for each categorical column
plt.figure(figsize=(15, 10))
for i, column in enumerate(categorical_columns, 1):
    plt.subplot(2, 2, i)
    data[column].value_counts().plot(kind='bar', color='lightgreen', edgecolor='black')
    plt.title(f'Distribution of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.xticks(rotation=90)

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Top 10 States by frequency
top_10_states = data['State'].value_counts().head(10)

plt.figure(figsize=(12, 6))
top_10_states.plot(kind='bar', color='cornflowerblue', edgecolor='black')
plt.title('Top 10 States by Frequency')
plt.xlabel('State')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Top 10 Crops by frequency
top_10_crops = data['Crop'].value_counts().head(10)

plt.figure(figsize=(12, 6))
top_10_crops.plot(kind='bar', color='seagreen', edgecolor='black')
plt.title('Top 10 Crops by Frequency')
plt.xlabel('Crop')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Frequency distribution for all States
plt.figure(figsize=(15, 6))
data['State'].value_counts().plot(kind='bar', color='skyblue', edgecolor='black')
plt.title('Frequency Distribution of States')
plt.xlabel('State')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

# Frequency distribution for all Crops
plt.figure(figsize=(15, 6))
data['Crop'].value_counts().plot(kind='bar', color='lightgreen', edgecolor='black')
plt.title('Frequency Distribution of Crops')
plt.xlabel('Crop')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

# Summary statistics for numerical features
print(data[numerical_columns].describe())

# Frequency distribution for categorical features
for column in categorical_columns:
    print(f'\nFrequency distribution for {column}:')
    print(data[column].value_counts())

"""Bivariate Analysis"""

import seaborn as sns
import matplotlib.pyplot as plt

# Select numerical columns
numerical_columns = data.select_dtypes(include=['float64', 'int64']).columns
numerical_data = data[numerical_columns]

# Correlation Matrix for numerical columns
corr_matrix = numerical_data.corr()

# Plotting the Correlation Matrix
plt.figure(figsize=(10, 5))
sns.heatmap(corr_matrix, annot=True, cmap="PuRd")
plt.title("Correlation Matrix of Numerical Features")
plt.show()

data.head(1)

# pairplot
sns.pairplot(data=data, vars=['Crop_Year', 'Area', 'Production'], hue='Yield', palette='husl')
plt.suptitle('Pairplot of Crop_Year, Area, and Production', y=1.02)
plt.show()

"""##**Encoding (label encoding)**"""

data["Crop"].nunique()

data["Season"].nunique()

data["State"].nunique()

from sklearn.preprocessing import OrdinalEncoder

from sklearn.preprocessing import OrdinalEncoder

crop_categories = [['Arecanut', 'Arhar/Tur', 'Castor seed', 'Coconut ', 'Cotton(lint)', 'Dry chillies', 'Gram',
                    'Jute', 'Linseed', 'Maize', 'Mesta', 'Niger seed', 'Onion', 'Other  Rabi pulses', 'Potato',
                    'Rapeseed &Mustard', 'Rice', 'Sesamum', 'Small millets', 'Sugarcane', 'Sweet potato',
                    'Tapioca', 'Tobacco', 'Turmeric', 'Wheat', 'Bajra', 'Black pepper', 'Cardamom', 'Coriander',
                    'Garlic', 'Ginger', 'Groundnut', 'Horse-gram', 'Jowar', 'Ragi', 'Cashewnut', 'Banana',
                    'Soyabean', 'Barley', 'Khesari', 'Masoor', 'Moong(Green Gram)', 'Other Kharif pulses',
                    'Safflower', 'Sannhamp', 'Sunflower', 'Urad', 'Peas & beans (Pulses)', 'other oilseeds',
                    'Other Cereals', 'Cowpea(Lobia)', 'Oilseeds total', 'Guar seed', 'Other Summer Pulses',
                    'Moth']]

season_categories = [['Whole Year ', 'Kharif     ', 'Rabi       ', 'Autumn     ', 'Summer     ', 'Winter     ']]

state_categories = [['Assam', 'Karnataka', 'Kerala', 'Meghalaya', 'West Bengal', 'Puducherry', 'Goa',
                     'Andhra Pradesh', 'Tamil Nadu', 'Odisha', 'Bihar', 'Gujarat', 'Madhya Pradesh',
                     'Maharashtra', 'Mizoram', 'Punjab', 'Uttar Pradesh', 'Haryana', 'Himachal Pradesh',
                     'Tripura', 'Nagaland', 'Chhattisgarh', 'Uttarakhand', 'Jharkhand', 'Delhi', 'Manipur',
                     'Jammu and Kashmir', 'Telangana', 'Arunachal Pradesh', 'Sikkim']]

# Create the OrdinalEncoder with the defined categories
ordinal_encoder = OrdinalEncoder(categories=[crop_categories[0], season_categories[0], state_categories[0]])

# Select the columns to be encoded
columns_to_encode = ['Crop', 'Season', 'State']

# Apply the ordinal encoding to the selected columns
data[columns_to_encode] = ordinal_encoder.fit_transform(data[columns_to_encode])

# Display the transformed data
data.head()

crop_mapping = {crop: index for index, crop in enumerate(data['Crop'].unique())}
season_mapping = {season: index for index, season in enumerate(data['Season'].unique())}
state_mapping = {state: index for index, state in enumerate(data['State'].unique())}

print("Crop Mapping:", crop_mapping)
print("Season Mapping:", season_mapping)
print("State Mapping:", state_mapping)

# Correlation heatmap for numerical features
correlation_matrix = data.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, square=True)
plt.title('Correlation Heatmap')
plt.show()

"""##scaling (minmax scaling)"""

from sklearn.preprocessing import MinMaxScaler
minmax_scaler = MinMaxScaler()
col = ["Crop", "Season", "Crop_Year", "State", "Area", "Production", "Annual_Rainfall", "Fertilizer", "Pesticide"]
data[col] = minmax_scaler.fit_transform(data[col])
data.head()

"""## Data **classification**"""

X = data[["Crop", "Crop_Year", "Season", "State", "Annual_Rainfall", "Fertilizer", "Pesticide"]]
y = data["Yield"]

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X, y, test_size=0.2,random_state=42)

# Check the shape of X and y before splitting
print("Shape of x:", X_train.shape)
print("Shape of y:", y_train.shape)

data.dtypes


#randomforest regressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Train the Random Forest Regressor
forest_model = RandomForestRegressor(random_state=42)
forest_model.fit(X_train, y_train)

# Predict on the test set
y_pred_forest = forest_model.predict(X_test)

# Calculate and print MAE, MSE, and R-squared
mae_forest = mean_absolute_error(y_test, y_pred_forest)
mse_forest = mean_squared_error(y_test, y_pred_forest)
r2_forest = r2_score(y_test, y_pred_forest)

print("Random Forest Mean Absolute Error (MAE):", mae_forest)
print("Random Forest Mean Squared Error (MSE):", mse_forest)
print("Random Forest R-squared (RÂ²):", r2_forest)

pickle.dump(forest_model, open('model.pkl','wb'))


